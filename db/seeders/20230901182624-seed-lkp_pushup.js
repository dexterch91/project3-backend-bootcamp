"use strict";

module.exports = {
  async up(queryInterface, Sequelize) {
    const PUSHUP_DATAENTRY = 
    [[60, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    [59, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    [58, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    [57, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    [56, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    [55, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    [54, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25],
    [53, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25],
    [52, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25],
    [51, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25, 25],
    [50, 22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 25],
    [49, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25, 25],
    [48, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 25, 25, 25, 25],
    [47, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 25],
    [46, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25],
    [45, 21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 25, 25, 25],
    [44, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 25, 25],
    [43, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 24, 24, 25, 25],
    [42, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 24, 25, 25],
    [41, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25],
    [40, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 23, 23, 24, 25],
    [39, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24],
    [38, 19, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24],
    [37, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 22, 22, 23, 24],
    [36, 18, 19, 19, 19, 20, 20, 20, 20, 21, 21, 22, 22, 23, 23],
    [35, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 23],
    [34, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 23],
    [33, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22],
    [32, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22],
    [31, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 22],
    [30, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21],
    [29, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 21],
    [28, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20],
    [27, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20],
    [26, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19],
    [25, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19],
    [24, 13, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19],
    [23, 12, 13, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18],
    [22, 11, 12, 13, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18],
    [21, 10, 11, 12, 13, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18],
    [20, 9, 10, 11, 12, 13, 14, 15, 15, 16, 16, 16, 17, 17, 17],
    [19, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16, 16, 16, 17, 17],
    [18, 6, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16, 16, 16, 17],
    [17, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16, 16, 16],
    [16, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16, 16],
    [15, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 15, 16],
    [14, 0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 15],
    [13, 0, 0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15],
    [12, 0, 0, 0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 14],
    [11, 0, 0, 0, 0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13],
    [10, 0, 0, 0, 0, 0, 1, 2, 4, 6, 8, 9, 10, 11, 12],
    [9, 0, 0, 0, 0, 0, 0, 1, 2, 4, 6, 8, 9, 10, 11],
    [8, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 6, 8, 9, 10],
    [7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 6, 8, 9],
    [6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 6, 8],
    [5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4, 6],
    [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 4],
    [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],
    [2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

    //Processing data from table
    const arrayOfObjects = PUSHUP_DATAENTRY.reduce((flattened, row) => {
      return flattened.concat(row.map((value, columnIndex) => {
        return {
          performance: row[0], // Calculate performance based on index 0 of each row
          age_group: columnIndex, // Age group is the index of the column within each row
          points: value, // Set points based on the column value
          created_at: new Date(),
          updated_at: new Date(),
        };
      }));
    }, []).filter(obj => obj.age_group !== 0);

    console.log(arrayOfObjects);
    
    
    await queryInterface.bulkInsert(
      "lkp_pushups",
      arrayOfObjects,
      {}
    );
  },

  async down(queryInterface, Sequelize) {
    await queryInterface.bulkDelete("lkp_pushups", null, {});
  },
};